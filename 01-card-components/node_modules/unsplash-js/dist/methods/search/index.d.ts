import { OrientationParam, PaginationParams } from '../../types/request';
import { ColorId, ContentFilter, Language, SearchOrderBy } from './types/request';
import * as SearchResponse from './types/response';
export declare type SearchParams = {
    query: string;
} & Pick<PaginationParams, 'page' | 'perPage'>;
declare type SearchPhotosParams = SearchParams & OrientationParam & {
    /**
     * API defaults to `"relevant"` if no value is provided
     */
    orderBy?: SearchOrderBy;
    color?: ColorId;
    /**
     * API defaults to `en` (English) if no value is provided
     */
    lang?: Language;
    /**
     * API defaults to `"low"` if no value is provided
     */
    contentFilter?: ContentFilter;
    collectionIds?: string[];
};
export declare const getPhotos: {
    handleRequest: (a: SearchPhotosParams, additionalFetchOptions?: Pick<RequestInit, "headers" | "body" | "cache" | "credentials" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<SearchResponse.Photos>;
};
export declare const getCollections: {
    handleRequest: (a: SearchParams, additionalFetchOptions?: Pick<RequestInit, "headers" | "body" | "cache" | "credentials" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<SearchResponse.Collections>;
};
export declare const getUsers: {
    handleRequest: (a: SearchParams, additionalFetchOptions?: Pick<RequestInit, "headers" | "body" | "cache" | "credentials" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<SearchResponse.Users>;
};
export {};
