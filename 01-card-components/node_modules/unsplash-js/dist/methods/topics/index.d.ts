import { OrientationParam, PaginationParams } from '../../types/request';
import * as Photo from '../photos/types';
import * as Topic from './types';
declare type TopicIdOrSlug = {
    topicIdOrSlug: string;
};
export declare const list: {
    handleRequest: (a: Pick<PaginationParams, "page" | "perPage"> & {
        /**
         * default: `position`
         */
        orderBy?: "latest" | "oldest" | "position" | "featured" | undefined;
        topicIdsOrSlugs?: string[] | undefined;
    }, additionalFetchOptions?: Pick<RequestInit, "headers" | "body" | "cache" | "credentials" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<{
        results: Topic.Basic[];
        total: number;
    }>;
};
export declare const get: {
    handleRequest: (a: TopicIdOrSlug, additionalFetchOptions?: Pick<RequestInit, "headers" | "body" | "cache" | "credentials" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<Topic.Full>;
};
export declare const getPhotos: {
    handleRequest: (a: TopicIdOrSlug & PaginationParams & OrientationParam, additionalFetchOptions?: Pick<RequestInit, "headers" | "body" | "cache" | "credentials" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<{
        results: Photo.Basic[];
        total: number;
    }>;
};
export {};
